import pandas as pd
from datetime import datetime, timedelta

input_files = [
    r"All Other.csv",
    r"Windows Hosts.csv",
    r"Windows (Domains).csv"
]
output_file = r"yes.txt"

current_time = datetime.now()
time_window_start = current_time - timedelta(hours=48)

with open(output_file, 'w') as f:
    for input_file in input_files:
        df = pd.read_csv(input_file)
        df.columns = df.columns.str.strip()  
        
        if 'All Other' in input_file:
            timestamp_column = 'metadata.ingested_timestamp (max) Time'
            hostname_column = 'principal.hostname' 
            logtype_column = 'metadata.log_type'
        elif 'Windows Hosts' in input_file:  
            timestamp_column = 'metadata.ingested_timestamp (max) Time'
            hostname_column = 'observer.hostname'
            logtype_column = 'metadata.log_type'
        elif 'Windows (Domains)' in input_file:
            timestamp_column = 'metadata.ingested_timestamp (max) Time'
            hostname_column = 'principal.administrative_domain'
            logtype_column = 'metadata.log_type'

        print(f"Columns in {input_file}: {df.columns.tolist()}")  # Debug
        
        if hostname_column not in df.columns:
            print(f"Error: Column '{hostname_column}' not found in {input_file}. Skipping this file.")
            continue
        if timestamp_column not in df.columns:
            print(f"Error: Column '{timestamp_column}' not found in {input_file}. Skipping this file.")
            continue

        df[timestamp_column] = pd.to_datetime(df[timestamp_column], errors='coerce', dayfirst=True)
        df_filtered = df[df[timestamp_column] < time_window_start]
        
        if logtype_column in df.columns:
            df_filtered = df_filtered[[hostname_column, timestamp_column, logtype_column]]
        else:
            print(f"Column '{logtype_column}' not found in {input_file}. Skipping logtype column.")
            df_filtered = df_filtered[[hostname_column, timestamp_column]]
        
        df_filtered['Formatted Output'] = df_filtered.apply(
            lambda row: f"{row[logtype_column] if logtype_column in df.columns else ''} - {row[hostname_column]}, Last Logged: {row[timestamp_column].strftime('%Y-%m-%d %H:%M:%S')}", 
            axis=1
        )

        f.write(f"\n=== {input_file} ===\n")  # File name at the top of each section
        f.write(f"-------------------\n")
        for line in df_filtered['Formatted Output']:
            f.write(f"{line}\n")

        print(f"Filtered data for {input_file} saved to {output_file}")

print(f"Data has been filtered and saved to: {output_file}")
